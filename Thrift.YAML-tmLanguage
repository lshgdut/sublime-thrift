# [PackageDev] target_format: plist, ext: tmLanguage
name: Thrift
scopeName: source.thrift
fileTypes: [thrift]
uuid: fa326c5c-81c5-49e6-8d4a-6a7555781b33

patterns:
- include: '#comments'

- name: meta.include.thrift
  match: (?<!\S)(include)(?!\S)(?:\s+((['"])(?>.*?(\3))))?
  captures:
    '1': {name: keyword.other.include.thrift}
    '2': {name: string.quoted.thrift}
    '3': {name: punctuation.definition.string.begin.thrift}
    '4': {name: punctuation.definition.string.end.thrift}

- name: meta.cpp-include.thrift
  match: (?<!\S)(cpp_include)(?!\S)(?:\s+((['"])(?>.*?(\3))))?
  captures:
    '1': {name: keyword.other.cpp-include.thrift}
    '2': {name: string.quoted.thrift}
    '3': {name: punctuation.definition.string.begin.thrift}
    '4': {name: punctuation.definition.string.end.thrift}

- name: meta.namespace.thrift
  match: (?<!\S)(namespace)(?!\S)(?:\s+([a-zA-Z_][\w.]*)(?:\s+([a-zA-Z_][\w.]*))?)?
  captures:
    '1': {name: keyword.other.namespace.thrift}
    '2': {name: support.other.namespace-language.thrift}
    '3': {name: variable.other.namespace.thrift}

- name: meta.namespace.thrift
  match: (?<!\S)((?:php|xsd)_namespace)(?!\S)(?:\s+([a-zA-Z_][\w.]*))?
  captures:
    '1': {name: keyword.other.namespace.thrift}
    '2': {name: variable.other.namespace.thrift}

- match: (?<!\S)((?:cpp|ruby|csharp)_namespace|py_module|(?:java|perl)_package|smalltalk_(?:category|prefix)|cocoa_prefix)(?!\S)(?:\s+([a-zA-Z_][\w.]*))?
  captures:
    '1': {name: invalid.deprecated.namespace.thrift}
    '2': {name: variable.other.namespace.thrift}

- comment: begin the definition list
  begin: (?=(struct|s?enum|union|service|const|typedef|exception)\b)
  end: '(?x)$.^ # this regex should never end'
  patterns:
  - include: '#comments'
  - name: meta.const.thrift
    begin: (?<!\S)(const)(?!\S)(?:\s+(?<ft>map\s*<\s*\g<ft>\s*,\s*\g<ft>\s*>|set\s*<\s*\g<ft>\s*>|list\s*<\s*\g<ft>\s*>\s*cpp_type|[a-zA-Z_][\w.]*)(?:\s+([a-zA-Z_][\w.]*)(?:\s*=)?)?)?
    beginCaptures:
      '1': {name: storage.modifier.const.thrift}
      '2': {name: storage.type.const.thrift}
      '3': {name: variable.other.const.thrift}
    end: "[,;]|$|^"
    patterns:
    - include: '#comments'
    - include: '#value'
  - name: meta.typedef.thrift
    begin: (?<!\S)(typedef)(?!\S)(?:\s+(?<ft>map\s*<\s*\g<ft>\s*,\s*\g<ft>\s*>|set\s*<\s*\g<ft>\s*>|list\s*<\s*\g<ft>\s*>\s*cpp_type|[a-zA-Z_][\w.]*)(?:\s+([a-zA-Z_][\w.]*))?)?
    beginCaptures:
      '1': {name: keyword.other.typedef.thrift}
      '2': {name: storage.type.typedef.thrift}
      '3': {name: variable.other.typedef.thrift}
    end: $|^
    patterns:
    - include: '#comments'
  - name: meta.union.thrift
    begin: (?<!\S)(union)(?!\S)(?:\s+([a-zA-Z_][\w.]*)\s*(?![^\s{]))?
    beginCaptures:
      '1': {name: keyword.other.union.thrift}
      '2': {name: entity.name.type.union.thrift}
    end: (?<=\})
    patterns:
    - name: keyword.other.xsd-all.thrift
      match: (?<!\S)xsd_all(?!\S)
    - begin: \{
      beginCaptures:
        '0': {name: punctuation.section.union.begin.thrift}
      end: \}
      endCaptures:
        '0': {name: punctuation.section.union.end.thrift}
      patterns:
      - include: '#comments'
      - include: '#field'
  - name: meta.enum.thrift
    begin: (?<!\S)(enum)(?!\S)(?:\s+([a-zA-Z_][\w.]*)\s*(?![^\s{]))?
    beginCaptures:
      '1': {name: keyword.other.enum.thrift}
      '2': {name: entity.name.type.enum.thrift}
    end: (?<=\})
    patterns:
    - begin: \{
      beginCaptures:
        '0': {name: punctuation.section.enum.begin.thrift}
      end: \}
      endCaptures:
        '0': {name: punctuation.section.enum.end.thrift}
      patterns:
      - match: (?<!\S)([a-zA-Z_][\w.]*)(?:\s*=\s*((0x[a-fA-F0-9]+)|\d+)?)?(?:\s*[,;])?
        captures:
          '1': {name: variable.other.enum.thrift}
          '2': {name: constant.numeric.integer.thrift}
      - include: '#comments'
      - name: invalid.illegal.thrift
        match: \S
  - name: meta.senum.thrift
    begin: (?<!\S)(senum)(?!\S)(?:\s+([a-zA-Z_][\w.]*)\s*(?![^\s{]))?
    beginCaptures:
      '1': {name: keyword.other.senum.thrift}
      '2': {name: entity.name.type.senum.thrift}
    end: (?<=\})|$
    patterns:
    - begin: \{
      beginCaptures:
        '0': {name: punctuation.section.senum.begin.thrift}
      end: \}
      endCaptures:
        '0': {name: punctuation.section.senum.end.thrift}
      patterns:
      - match: (?<!\S)([a-zA-Z_][\w.]*)(?:\s*[,;])?
        captures:
          '1': {name: variable.other.senum.thrift}
      - include: '#comments'
      - name: invalid.illegal.thrift
        match: \S
  - name: meta.struct.thrift
    begin: (?<!\S)(struct)(?!\S)(?:\s+([a-zA-Z_][\w.]*)\s*(?![^\s{]))?
    beginCaptures:
      '1': {name: keyword.other.struct.thrift}
      '2': {name: entity.name.type.struct.thrift}
    end: (?<=\})
    patterns:
    - name: keyword.other.xsd-all.thrift
      match: (?<!\S)xsd_all(?!\S)
    - begin: \{
      beginCaptures:
        '0': {name: punctuation.section.struct.begin.thrift}
      end: \}
      endCaptures:
        '0': {name: punctuation.section.struct.end.thrift}
      patterns:
      - include: '#comments'
      - include: '#field'
  - name: meta.exception.thrift
    begin: (?<!\S)(exception)(?!\S)(?:\s+([a-zA-Z_][\w.]*)\s*(?![^\s{]))?
    beginCaptures:
      '1': {name: keyword.other.exception.thrift}
      '2': {name: entity.name.type.exception.thrift}
    end: (?<=\})
    patterns:
    - begin: \{
      beginCaptures:
        '0': {name: punctuation.section.exception.begin.thrift}
      end: \}
      endCaptures:
        '0': {name: punctuation.section.exception.end.thrift}
      patterns:
      - include: '#comments'
      - include: '#field'
  - name: meta.service.thrift
    begin: (?<!\S)(service)(?!\S)(?:\s+([a-zA-z_][\w.]*)(?:\s+(extends)(?:\s+([a-zA-Z_][\w.]*))?)?\s*(?![^\s{]))?
    beginCaptures:
      '1': {name: keyword.other.service.thrift}
      '2': {name: entity.name.type.service.thrift}
      '3': {name: keyword.other.service.extends.thrift}
      '4': {name: entity.other.inherited-class.thrift}
    end: (?<=\})
    patterns:
    - begin: \{
      beginCaptures:
        '0': {name: punctuation.section.service.begin.thrift}
      end: \}
      endCaptures:
        '0': {name: punctuation.section.service.end.thrift}
      patterns:
      - include: '#comments'
      - name: meta.service.function.thrift
        begin: "(?x)(?<!\\S)(async(?!\\S))?\\s*\
          (?<ft>map\\s*<\\s*\\g<ft>\\s*,\\s*\\\
          g<ft>\\s*> |set\\s*<\\s*\\g<ft>\\s*> |\
          list\\s*<\\s*\\g<ft>\\s*>\\s*(cpp_type(?!\\S))? |\
          (?!async\\b)[a-zA-Z_][\\w.]*\
          )\\s*(?:(?<!\\S)([a-zA-Z_][\\\
          w.]*)\\s*(?![^\\s(]))?"
        beginCaptures:
          '1': {name: keyword.other.async.thrift}
          '2': {name: storage.type.function.thrift}
          '3': {name: keyword.other.cpp_type.thrift}
          '4': {name: entity.name.function.thrift}
        end: $|^
        patterns:
        - begin: \(
          beginCaptures:
            '0': {name: punctuation.definition.arguments.begin.thrift}
          end: \)
          endCaptures:
            '0': {name: punctuation.definition.arguments.end.thrift}
          patterns:
          - include: '#comments'
          - include: '#field'
        - begin: (?<![^\s)])(throws)(?![^\s(])
          beginCaptures:
            '1': {name: keyword.other.service.function.throws.thrift}
          end: $
          patterns:
          - begin: \(
            beginCaptures:
              '0': {name: punctuation.definition.arguments.begin.thrift}
            end: \)
            endCaptures:
              '0': {name: punctuation.definition.arguments.end.thrift}
            patterns:
            - include: '#comments'
            - include: '#field'
        - include: '#comments'

repository:
  comments:
    patterns:
    - begin: (^[ \t]+)?(?=#)
      beginCaptures:
        '1': {name: punctuation.whitespace.comment.leading.thrift}
      end: (?!\G)
      patterns:
      - name: comment.line.number-sign.thrift
        begin: '#'
        beginCaptures:
          '0': {name: punctuation.definition.comment.thrift}
        end: $
    - begin: (^[ \t]+)?(?=//)
      beginCaptures:
        '1': {name: punctuation.whitespace.comment.leading.thrift}
      end: (?!\G)
      patterns:
      - name: comment.line.double-slash.thrift
        begin: //
        beginCaptures:
          '0': {name: punctuation.definition.comment.thrift}
        end: $
    - name: comment.block.documentation.thrift
      begin: /\*\*
      beginCaptures:
        '0': {name: punctuation.definition.comment.begin.thrift}
      end: \*/
      endCaptures:
        '0': {name: punctuation.definition.comment.end.thrift}
    - name: comment.block.thrift
      begin: /\*
      beginCaptures:
        '0': {name: punctuation.definition.comment.begin.thrift}
      end: \*/
      endCaptures:
        '0': {name: punctuation.definition.comment.end.thrift}

  field:
    name: meta.field.thrift
    begin: "(?x)(?<![^\\s{(])(?=\\S)(\\d+\\s*:)?[ \\t]*\
      (?:(required|optional)(?!\\S)[ \\t]*|(?=\\S)(?!=required|optional|\\\
      d))"
    beginCaptures:
      '1': {name: entity.other.field-id.thrift}
      '2': {name: keyword.other.requiredness.thrift}
    end: '[,;]|(?=[)#}]|//)|$'
    endCaptures:
      '0': {name: punctuation.separator.fields.thrift}
    patterns:
    - begin: "(?x)(?<ft>map\\s*<\\s*\\g<ft>\\s*,\\\
        s*\\g<ft>\\s*> |set\\s*<\\s*\\g<ft>\\s*> |\
        list\\s*<\\s*\\g<ft>\\s*>\\s*(cpp_type(?!\\S))? |[a-zA-Z_][\\\
        w.]*)[ \\t]*(?:([a-zA-Z_][\\w.]*)[ \\t]*)?\
        \ # identifier"
      beginCaptures:
        '1': {name: storage.type.field.thrift}
        '2': {name: keyword.other.cpp-type.thrift}
        '3': {name: variable.other.field-name.thrift}
      end: (?=[,;]|[)}#]|//)|$
      patterns:
      - begin: '='
        end: (?=[,;]|[)}#]|//)|$
        patterns:
        - name: keyword.other.xsd_optional.thrift
          match: (?<!\S)(xsd_optional)\b
        - name: keyword.other.xsd_nillable.thrift
          match: (?<!\S)(xsd_nillable)\b
        - include: '#value'

  value:
    patterns:
    - name: constant.numeric.float.thrift
      match: '[+-]?\d*\.\d+([eE][+-]?\d+)?'
    - name: constant.numeric.integer.thrift
      match: '(0x[a-fA-F\d]+)|([+-]?\d+)'
    - name: constant.other.const-data.thrift
      match: '[a-zA-Z_][\w.]*'
    - name: string.quoted.single.thrift
      begin: "'"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.thrift}
      end: "'"
      endCaptures:
        '0': {name: punctuation.definition.string.end.thrift}
    - name: string.quoted.double.thrift
      begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.thrift}
      end: '"'
      endCaptures:
        '0': {name: punctuation.definition.string.begin.thrift}
    - name: meta.array.thrift
      begin: \[
      beginCaptures:
        '0': {name: punctuation.definition.array.begin.thrift}
      end: \]
      endCaptures:
        '0': {name: punctuation.definition.array.end.thrift}
      patterns:
      - match: '[,;]'
      - include: '#value'
    - name: meta.map.thrift
      begin: \{
      beginCaptures:
        '0': {name: punctuation.definition.map.begin.thrift}
      end: \}
      endCaptures:
        '0': {name: punctuation.definition.map.end.thrift}
      patterns:
      - match: '[:,;]'
      - include: '#value'
    - name: invalid.illegal.thrift
      match: \S
